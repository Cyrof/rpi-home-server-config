- name: Gracefully drain & shut down k3s AGENTS
  hosts: k3s_agents
  gather_facts: yes
  become: yes
  serial: 1
  vars:
    kubeconfig_path: /etc/rancher/k3s/k3s.yaml
    kubectl_path: /usr/local/bin/kubectl
    k3s_server_host: "{{ groups['k3s_server'][0] }}"
    k8s_node_name: "{{ hostvars[inventory_hostname].ansible_hostname }}"
    drain_timeout: 600s
    grace_period: 60

  pre_tasks:
    - name: Ensure k3s server is running (on {{ k3s_server_host }})
      ansible.builtin.systemd:
        name: k3s
        enabled: yes
      delegate_to: "{{ k3s_server_host }}"
      become: yes

    - name: Wait for Kubernetes API to be ready (on {{ k3s_server_host }})
      ansible.builtin.command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} get --raw=/readyz
      register: apiready
      retries: 30
      delay: 5
      until: apiready.rc == 0
      delegate_to: "{{ k3s_server_host }}"
      become: yes

    - name: (Sanity) Show node name that will be cordoned
      ansible.builtin.debug:
        var: k8s_node_name

  tasks:
    - name: Cordon {{ k8s_node_name }}
      ansible.builtin.command:
        cmd: >
          {{ kubectl_path }}
          --kubeconfig {{ kubeconfig_path }}
          cordon {{ k8s_node_name }}
      delegate_to: "{{ k3s_server_host }}"

    - name: Drain {{ k8s_node_name }} (ignore Daemonset; evicts pod safely)
      ansible.builtin.command:
        cmd: >
          {{ kubectl_path }}
          --kubeconfig {{ kubeconfig_path }}
          drain {{ k8s_node_name }}
          --ignore-daemonsets
          --delete-emptydir-data
          --grace-period={{ grace_period }}
          --timeout={{ drain_timeout }}
      delegate_to: "{{ k3s_server_host }}"

    - name: Stop k3s agent
      ansible.builtin.systemd:
        name: k3s-agent
        state: stopped
        enabled: yes

    - name: Find a working shutdown command
      ansible.builtin.shell: |
        set -e
        if command -v shutdown >/dev/null 2>&1; then echo "shutdown -h +1"; exit 0; fi
        if command -v systemctl >/dev/null 2>&1; then echo "systemctl poweroff"; exit 0; fi
        if command -v poweroff >/dev/null 2>&1; then echo "poweroff"; exit 0; fi
        echo "/sbin/shutdown -h +1"
      args:
        executable: /bin/bash
      register: shutdown_cmd

    - name: Schedule/power off node
      ansible.builtin.command: "{{ shutdown_cmd.stdout }}"
      become: yes
      ignore_errors: true

    - name: Wait for SSH to go away (node is down)
      delegate_to: localhost
      become: no
      ansible.builtin.wait_for:
        host: "{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}"
        port: 22
        state: stopped
        delay: 5
        timeout: 300

- name: Gracefully drain & shut down the k3s SERVER
  hosts: k3s_server
  gather_facts: yes
  become: yes
  serial: 1
  vars:
    kubeconfig_path: /etc/rancher/k3s/k3s.yaml
    kubectl_path: /usr/local/bin/kubectl
    k8s_node_name: "{{ hostvars[inventory_hostname].ansible_hostname }}"
    drain_timeout: 600s
    grace_period: 60
    embedded_etcd: false
    etcd_snapshot_dir: /var/lib/rancher/k3s/server/db/snapshots

  tasks:
    - name: Cordon server {{ k8s_node_name }}
      ansible.builtin.command:
        cmd: >
          {{ kubectl_path }}
          --kubeconfig {{ kubeconfig_path }}
          cordon {{ k8s_node_name }}

    - name: Drain server {{ k8s_node_name }}
      ansible.builtin.command:
        cmd: >
          {{ kubectl_path }}
          --kubeconfig {{ kubeconfig_path }}
          drain {{ k8s_node_name }}
          --ignore-daemonsets
          --delete-emptydir-data
          --grace-period={{ grace_period }}
          --timeout={{ drain_timeout }}

    - name: Check for etcd data dir
      ansible.builtin.stat:
        path: /var/lib/rancher/k3s/server/db/etcd
      register: etcd_dir

    - name: Check for SQLite db file
      ansible.builtin.stat:
        path: /var/lib/rancher/k3s/server/db/state.db
      register: sqlite_db

    - name: Set datastore facts
      ansible.builtin.set_fact:
        using_etcd: "{{ (etcd_dir.stat.exists | default(false)) and not (sqlite_db.stat.exists | default(false)) }}"
        using_sqlite: "{{ sqlite_db.stat.exists | default(false) }}"

    - name: Debug datastore
      ansible.builtin.debug:
        msg: "Datastore -> etcd={{ using_etcd }}, sqlite={{ using_sqlite }}"

    - name: Take embedded etcd snapshot
      when: using_etcd | bool
      ansible.builtin.shell: |
        mkdir -p {{ etcd_snapshot_dir }}
        /usr/local/bin/k3s etcd-snapshot save \
          --dir {{ etcd_snapshot_dir }} \
          --name on-demand
      args:
        chdir: /
      register: etcd_snap
      changed_when: "'saved' in etcd_snap.stdout or etcd_snap.rc == 0"
      failed_when: using_etcd and etcd_snap.rc != 0

    - name: Stop k3s server
      ansible.builtin.systemd:
        name: k3s
        state: stopped
        enabled: yes

    - name: Find a working shutdown command
      ansible.builtin.shell: |
        set -e 
        if command -v shutdown >/dev/null 2>&1; then echo "shutdown -h +1"; exit 0; fi
        if command -v systemctl >/dev/null 2>&1; then echo "systemctl poweroff"; exit 0; fi
        if command -v poweroff >/dev/null 2>&1; then echo "poweroff"; exit 0; fi
        echo "/sbin/shutdown -h +1"
      args:
        executable: /bin/bash
      register: shutdown_cmd

    - name: Schedule/power off server
      ansible.builtin.command: "{{ shutdown_cmd.stdout }}"
      become: yes
      ignore_errors: true

    - name: Wait for SSH to go away (server is down)
      delegate_to: localhost
      become: no
      ansible.builtin.wait_for:
        host: "{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}"
        port: 22
        state: stopped
        delay: 5
        timeout: 300
